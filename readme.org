* My Emacs config
** Bootstrap
*** Native Comp
#+begin_src elisp
  (when (fboundp 'native-compile-async)
    (setq comp-deferred-compilation t))

  (setq native-comp-async-report-warnings-errors nil)
  (setq warning-minimum-level :error)
#+end_src

*** Package manager
Straight.el
#+BEGIN_SRC elisp
  (setq package-enable-at-startup nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (use-package use-package-ensure-system-package)
#+END_SRC

*** Enconding
From [[https://github.com/doomemacs/doomemacs/blob/594d70292dc134d483fbf7a427001250de07b4d2/lisp/doom-start.el#L132-L134][Doom emacs]]
Contrary to what many Emacs users have in their configs, you don't need more than this to make UTF-8 the default coding system:
#+begin_src elisp
(set-language-environment "UTF-8")
#+end_src

*** Misc
#+begin_src elisp
  (setq default-directory "~/")

  ;; Automatically revert buffers for changed files
  (global-auto-revert-mode t)

  ;; remembering the last place you visited in a file
  (save-place-mode 1)

  ;; Close all dired buffers after opening
  (setq dired-kill-when-opening-new-dired-buffer t)

  (defun dont-kill-scratch ()
    "This function doesn't let you kill scratch by mistake."
    (if (not (equal (buffer-name) "*scratch*"))
        t
      (bury-buffer)
      nil))
  (add-hook 'kill-buffer-query-functions #'dont-kill-scratch)

  ;; Store auto-save and backup files in a temporary directory
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq create-lockfiles nil)

  ;; writing yes or no is length, type y / n instead
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  (use-package add-node-modules-path)
  (use-package exec-path-from-shell)
  (setq exec-path-from-shell-variables '("GOPATH" "PATH" "MANPATH"))
  (exec-path-from-shell-initialize)
#+end_src

*** Startup Screen
#+begin_src elisp
  (use-package dashboard
    :config
    (setq dashboard-banner-logo-title "Ol√°, bem vindo ao Emacs")
    (setq dashboard-startup-banner "~/.emacs.d/nyan-cat.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((projects . 5) (agenda . 5) ))
    (dashboard-setup-startup-hook))
#+end_src
*** Emacs Server
#+begin_src elisp
(server-start)
#+end_src
** UI
*** Theme
**** Doom Themes
#+begin_src elisp
    (use-package doom-themes
      :config
      (doom-themes-neotree-config)
      (setq doom-themes-treemacs-theme "doom-colors")
      (with-eval-after-load 'doom-themes
        (doom-themes-treemacs-config))
      (setq doom-variable-pitch-font (font-spec :family "Fira Code" :size 10))
      (set-face-attribute 'default nil :font "Ubuntu Mono 15")
      (set-face-attribute 'font-lock-keyword-face nil :slant 'italic :weight 'normal :family "CascadiaCode")
      (set-face-attribute 'region nil :background "#000" :foreground "#ffffff")
      (load-theme (intern "doom-tokyo-night") t))
#+end_src

*** Neotree
#+begin_src elisp
  (use-package neotree
    :bind([f9] . neotree-toggle)
    :config
    (setq neo-autorefresh nil)
    (setq neo-smart-open t)
    (with-eval-after-load 'neotree
      (define-key neotree-mode-map (kbd "h") 'neotree-hidden-file-toggle)))

  (defun text-scale-twice ()
    (interactive)
    (progn(text-scale-adjust 0)(text-scale-decrease 2)))
  (add-hook 'neo-after-create-hook (lambda (_)(call-interactively 'text-scale-twice)))
#+end_src
*** Improve theme loading
Source: [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][Reddit]]
#+begin_src elisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src

*** Icons
#+begin_src elisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

*** Cosmetics

**** Nyan cat
#+begin_src elisp
  (use-package nyan-mode
    :init
    (nyan-mode t))
#+end_src

**** Emoji
#+begin_src elisp
  (use-package emojify
      :config
      (add-hook 'after-init-hook #'global-emojify-mode))

#+end_src

*** Dimmer
#+begin_src elisp :tangle no
  (use-package dimmer
      :init
      (dimmer-mode t)
      :config
      (setq dimmer-fraction 0.3))
#+end_src

*** Emacs interface
#+begin_src elisp
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (column-number-mode)
  (setq ring-bell-function 'ignore)
#+end_src

*** Doom modeline
#+begin_src elisp
  (use-package doom-modeline
    :config
    (setq doom-modeline-height 25)
    (set-face-background 'doom-modeline-bar (face-background 'mode-line))
    (setq doom-modeline-bar-width 1)
    (doom-modeline-mode 1))
#+end_src
*** Dialog
Don't pop up UI dialogs when prompting
#+begin_src elisp
  (setq use-dialog-box nil)
#+end_src
*** Tabs
Centaur tabs
#+begin_src elisp :tangle no
  (use-package centaur-tabs
    :demand
    :bind
    ("M-[" . centaur-tabs-backward)
    ("M-]" . centaur-tabs-forward)
    :config
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-gray-out-icons 'buffer)
    (setq centaur-tabs-style "rounded")
    (setq centaur-tabs-height 40)
    (centaur-tabs-mode t)
    (centaur-tabs-group-by-projectile-project)
    ;; Only show tabs in buffers visiting files
    (advice-add 'centaur-tabs-line :around
                (lambda (oldfn &rest args)
                  (if (buffer-file-name)
                      (apply oldfn args)
                    (setq header-line-format nil)))))
#+end_src
*** Company
#+begin_src elisp
  (use-package company
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 2))

    (global-company-mode)
    (global-set-key (kbd "TAB") #'company-indent-or-complete-common)

  (setq company-tooltip-align-annotations t)

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
*** Buffers
Before kill a modified buffer, give option to see the diff
Original code from [[https://emacs.stackexchange.com/questions/3245/kill-buffer-prompt-with-option-to-diff-the-changes/3363#3363][here]]
#+begin_src elisp
  (defun my/kill-this-buffer ()
    (interactive)
    (catch 'quit
      (save-window-excursion
        (let (done)
          (when (and buffer-file-name (buffer-modified-p))
            (while (not done)
              (let ((response (read-char-choice
                               (format "Save file %s? (y, n, d, q) " (buffer-file-name))
                               '(?y ?n ?d ?q))))
                (setq done (cond
                            ((eq response ?q) (throw 'quit nil))
                            ((eq response ?y) (save-buffer) t)
                            ((eq response ?n) (set-buffer-modified-p nil) t)
                            ((eq response ?d) (diff-buffer-with-file) nil))))))
          (kill-buffer (current-buffer))))))
#+end_src
** Keys
*** Org-mode
#+begin_src elisp
  (global-set-key (kbd "C-c a")
                  (lambda ()
                    (interactive)
                    (org-agenda nil "z")))
  (global-set-key (kbd "C-c /") 'org-capture)
  (global-set-key (kbd "s-c") 'ox-clip-formatted-copy)
#+end_src
*** Buffer/Window
#+begin_src elisp
  (global-set-key [s-tab] 'next-buffer)
  (global-set-key [S-s-iso-lefttab] 'previous-buffer)
  (global-set-key ["M-["] 'next-buffer)
  (global-set-key ["M-]"] 'previous-buffer)
  ;;; change window
  (global-set-key [(C-tab)] 'other-window)
  (global-set-key [(C-M-tab)] 'other-window)

  ;;; Remap kill buffer to my/kill-this-buffer
  (global-set-key (kbd "C-x k") 'my/kill-this-buffer)

  ;;; Go to scratch buffer
  (global-set-key (kbd "<f2>") (lambda() (interactive)(switch-to-buffer "*scratch*")))
#+end_src
*** Code navigation
#+begin_src elisp
  (global-set-key (kbd "M-g") 'goto-line)
  (global-set-key (kbd "C-c s") 'sort-lines)
#+end_src
*** Editing
#+begin_src elisp
  (global-set-key (kbd "C-c c") 'comment-region)
  (global-set-key (kbd "C-c d") 'uncomment-region)
#+end_src

*** Conf
#+begin_src elisp
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/readme.org")))
#+end_src

** Editing
*** Display line numbers
#+begin_src elisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'conf-mode-hook #'display-line-numbers-mode)
#+end_src
*** Indent Guides
#+begin_src elisp :tangle no
  (use-package highlight-indent-guides
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))

#+end_src

*** Misc
#+begin_src elisp
  ;; Do not wrap lines
  (setq-default truncate-lines t)

  ;; spaces instead of tabs
  (setq-default indent-tabs-mode nil)

  ;; Complain about trailing white spaces
  (setq show-trailing-whitespace t)

  ;; Cleanup white spaces before save
  (setq whitespace-style '(face trailing lines tabs big-indent))
  (add-hook 'before-save-hook 'whitespace-cleanup)

  (use-package smartparens)
  (smartparens-global-mode t)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))


  (use-package rainbow-mode)

  (use-package string-inflection)

  (global-hl-line-mode +1)
#+end_src
*** Multiple cursor
#+begin_src elisp
      (use-package multiple-cursors
        :bind (("C-S-c C-S-c" . mc/edit-lines)
               ("s-." . mc/mark-next-like-this)
               ("s-," . mc/mark-previous-like-this)
               ("s->" . mc/mark-all-like-this)
               ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+end_src
*** Unfill paragraph
#+begin_src elisp
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph or (REGION) and make it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))
#+end_src
*** Treesiter
#+begin_src elisp
  (require 'treesit)
  ;; modules build from https://github.com/casouri/tree-sitter-module
  (setq treesit-extra-load-path '("~/Projects/tree-sitter-module/dist"))
  (push '(css-mode . css-ts-mode) major-mode-remap-alist)
  (push '(javascript-mode . js-ts-mode) major-mode-remap-alist)
  (push '(js-json-mode . json-ts-mode) major-mode-remap-alist)
  (push '(typescript-mode . typescript-ts-mode) major-mode-remap-alist)
#+end_src

** Tools
*** Flymake
#+begin_src elisp
  (use-package sideline-flymake
    :hook (flymake-mode . sideline-mode)
    :init
    (setq sideline-flymake-display-errors-whole-line 'point) ; 'point to show errors only on point
                                          ; 'line to show errors on the current line
    (setq sideline-backends-right '(sideline-flymake)))
#+end_src
**** Custom Fringe
#+begin_src elisp
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'my-rounded-fringe-indicator
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000)))
#+end_src

*** Flyspell
#+begin_src elisp
  (use-package flyspell)
  (use-package flyspell-correct-popup)
  (setq ispell-program-name "aspell")
  (ispell-change-dictionary "pt_BR")

  (defun fd-switch-dictionary()
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "pt_BR") "english" "pt_BR")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))

  (global-set-key (kbd "<f5>") 'fd-switch-dictionary)
  (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+end_src
*** Yasnippet
#+begin_src elisp
  (use-package yasnippet
    :init
    :config
    (yas-load-directory "~/.emacs.d/snippets")
    (yas-global-mode 1))
#+end_src
*** Helm
#+begin_src elisp
  (use-package helm
    :straight t
    :config
    (setq helm-buffers-fuzzy-matching t)
    (define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
    (setq helm-recentf-fuzzy-match    t))
#+end_src
*** Code Folding
#+begin_src elisp
  (use-package yafolding
    :config
    (global-set-key (kbd "<C-return>") #'yafolding-toggle-element))
#+end_src
*** Restclient
#+begin_src elisp
(use-package restclient)
#+end_src
*** Projectile
#+begin_src elisp
  (use-package helm-ag
    :ensure-system-package (ag . "sudo apt install silversearcher-ag"))

  (use-package projectile
    :bind-keymap ("C-c p" . projectile-command-map)
    :config
    (setq projectile-indexing-method 'alien)
    (setq projectile-sort-order 'recently-active)
    (setq projectile-completion-system 'helm)
    (setq projectile-per-project-compilation-buffer t)
    (setq projectile-comint-mode t)
    (setq compilation-read-command nil)
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (add-to-list 'projectile-globally-ignored-files "yarn.lock")
    (add-hook 'projectile-after-switch-project-hook 'projectile-run-project)
    (helm-projectile-on)
    (projectile-mode))
  (use-package helm-projectile)

#+end_src
*** Magit
#+begin_src elisp
  (use-package magit)
  (use-package magit-todos)
#+end_src
*** Treemacs
#+begin_src elisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))


  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

#+end_src
*** Blamer
#+begin_src elisp :tangle no
  (use-package blamer
  :bind (("s-i" . blamer-show-commit-info)
         ("s-n" . blamer-mode))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 10)
  :custom-face
  (blamer-face ((t :foreground "#9099AB"
                    :background nil
                    :height .9
                    :italic t))))
#+end_src
*** Todoist
#+begin_src elisp :tangle no
  (setq todoist-token "")
#+end_src
*** Yequake
#+begin_src elisp
  (use-package yequake
    :straight (yequake :host github :repo "alphapapa/yequake")

    :custom
    (yequake-frames
     '(("terminal"
        (buffer-fns . (vterm))
        (width . 0.98)
        (height . 0.5)
        (alpha . 1.0)
        (frame-parameters . ((undecorated . t)
                             (skip-taskbar . t)
                             (sticky . t)))))))
#+end_src
*** Vterm
#+begin_src elisp
(use-package vterm)

(global-set-key (kbd "<f3>") (lambda() (interactive)(vterm)))
#+end_src
*** EAF
#+begin_src elisp
  (straight-use-package
   '(webkit :type git :host github :repo "akirakyle/emacs-webkit"
            :branch "main"
            :files (:defaults "*.js" "*.css" "*.so")
            :pre-build ("make")))
  (use-package webkit)
  (setq webkit-search-prefix "https://google.com/search?q=")
#+end_src
**** Search clipboard on google
#+begin_src elisp
  (global-set-key (kbd "C-c C-g") (lambda () (interactive) (webkit (car kill-ring))))
#+end_src
** Modes
*** Org
**** Bootstrap
#+begin_src elisp
  (use-package org :straight (:type built-in))
  (use-package org-contrib)
  (use-package org-web-tools
    :ensure-system-package (pandoc . "sudo apt install pandoc"))

  (use-package org-ql
    :after '(org)
    :straight (org-ql :host github :repo "alphapapa/org-ql"))
  (use-package git-auto-commit-mode)
  (use-package ox-clip)
  (require 'org-inlinetask)
  (require 'org-tempo)
  (require 'org-collector)
  (setq org-export-coding-system 'utf-8)
  (setq org-directory "~/Projects/org-files")
  (setq org-tag-alist '(("work" . ?w) ("personal" . ?p) ("meta" . ?m) ("emacsLove" . ?l) ("quotes" . ?q) ("finances" . ?f) ("howto" . ?h)))
  (setq org-log-done nil)
  (setq org-log-repeat nil)
  (setq org-startup-indented t)
  (setq org-export-with-toc nil)
  (setq org-export-with-section-numbers nil)
  (setq gac-automatically-push-p t)
  (add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src
**** Ox
***** Slack
#+begin_src elisp
  (use-package ox-slack
    :bind ("C-c e s" . org-slack-export-to-clipboard-as-slack))

#+end_src

**** Reveal
#+begin_src elisp
  (use-package ox-reveal)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-title-slide nil)
  (setq org-reveal-mathjax t)

  (use-package htmlize)
#+end_src
**** UI
***** Org modern
#+begin_src elisp
  (use-package org-modern
    :config
    (setq ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities nil
     org-ellipsis "‚Ä¶")
    (global-org-modern-mode))

#+end_src

***** SVG
#+begin_src elisp :tangle no
  (use-package svg-tag-mode
    :commands svg-tag-mode
    :config
    (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
    (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
    (defconst day-re "[A-Za-z]\\{3\\}")
    (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))
    (defun svg-progress-percent (value)
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ (string-to-number value) 100.0)
                                        nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag (concat value "%")
                               nil :stroke 0 :margin 0)) :ascent 'center))

    (defun svg-progress-count (value)
      (let* ((seq (mapcar #'string-to-number (split-string value "/")))
             (count (float (car seq)))
             (total (float (cadr seq))))
        (svg-image (svg-lib-concat
                    (svg-lib-progress-bar (/ count total) nil
                                          :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                    (svg-lib-tag value nil
                                 :stroke 0 :margin 0)) :ascent 'center)))

    (setq svg-tag-tags
          `(
            ;; Org tags
            (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
            (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))
            ;; Task priority
            ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                  (svg-tag-make tag :face 'org-priority
                                                :beg 2 :end -1 :margin 0))))

            ;; Progress
            ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                                (svg-progress-percent (substring tag 1 -2)))))
            ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                              (svg-progress-count (substring tag 1 -1)))))

            ;; TODO / DONE
            ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
            ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


            ;; Citation of the form [cite:@Knuth:1984]
            ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                              (svg-tag-make tag
                                                            :inverse t
                                                            :beg 7 :end -1
                                                            :crop-right t))))
            ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                       (svg-tag-make tag
                                                                     :end -1
                                                                     :crop-left t))))


            ;; Active date (with or without day name, with or without time)
            (,(format "\\(<%s>\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0))))
            (,(format "\\(<%s \\)%s>" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
            (,(format "<%s \\(%s>\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

            ;; Inactive date  (with or without day name, with or without time)
            (,(format "\\(\\[%s\\]\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
            (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
            (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date)))))))
#+end_src

***** Olivetti
#+begin_src elisp :tangle no
  (use-package olivetti
    :custom
    (olivetti-body-width 120)
    :config
    (add-hook 'markdown-mode-hook (lambda () (olivetti-mode)))
    (add-hook 'org-mode-hook (lambda () (olivetti-mode))))
#+end_src
**** Super-agenda
#+begin_src elisp
  (use-package org-super-agenda
    :after org-agenda
    :config
    (org-super-agenda-mode t))

  (setq org-agenda-custom-commands
        '(("z" "Super view"
           ((tags "meta" ((org-agenda-overriding-header "Objetivos de 2023")))
            (agenda "" ((org-agenda-span 'week)
                        (org-agenda-overriding-header "")
                        ))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-remove-tags t)
                         (org-super-agenda-groups
                          '((:name "Pr√≥ximos eventos"
                                   :discard (:tag ("finances"))
                                   :deadline future
                                   :order 8)
                            (:name "Sem data" :deadline nil :order 9)
                            (:discard (:tag ("Routine" "Daily" "meta" "finances")))))))
            ))))
#+end_src
**** Functions
Check if a billing is paid based on the date
#+begin_src elisp
  (defun is-paid? (time)
    (if (eq (string-to-number (format-time-string "%m")) (nth 4 (org-parse-time-string time)))
        "-" "pago"))
#+end_src
Add ID to all headings [[https://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode][source]]
#+begin_src elisp
  (defun add-id-to-tasks-in-file ()
    "Add ID properties to all tasks in the current file which
    do not already have one."
    (interactive)
    (org-ql-select (buffer-file-name)
      '(and
        (todo))
      :action #'org-id-get-create))
#+end_src
**** Roam
#+begin_src elisp
  (use-package org-roam
    ;; :init
    ;; (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Projects/org-files/roam")
    (setq org-roam-dailies-directory "daily/")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("<f4>" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("<f12>" . org-roam-dailies-capture-today)
           ;; :map org-mode-map
           ;; ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
#+end_src
**** Sync
#+begin_src elisp
  ;; Setting variables for the ics file path
  (setq org-agenda-private-local-path "~/org.ics")
  (setq org-agenda-private-remote-path "")

  (defun org-agenda-export-to-ics ()
    (interactive)
    (org-icalendar-combine-agenda-files)
    (copy-file org-agenda-private-local-path org-agenda-private-remote-path t))

  (global-set-key (kbd "C-c e i") #'org-agenda-export-to-ics)
#+end_src

*** Markdown
#+begin_src elisp
  (use-package markdown-mode)
#+end_src
*** Web mode
#+begin_src elisp
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.js[x]?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-enable-auto-indentation nil
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-block-padding 2
          web-mode-comment-style 2
          web-mode-enable-css-colorization t
          web-mode-enable-auto-pairing t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t
          web-mode-content-types-alist  '(("django" . "\\.tpl\\'"))
          web-mode-content-types-alist  '(("jsx" . "\\.js[x]?\\'"))))

  (add-hook 'web-mode-hook  'auto-rename-tag-mode)
#+end_src
Auto rename tag
#+begin_src elisp
  (use-package auto-rename-tag)
#+end_src

yasnippet
#+begin_src elisp
  (eval-after-load 'yasnippet
    '(let ((dir "~/.emacs.d/snippets/web-mode"))
        (add-to-list 'yas-snippet-dirs dir)
        (yas-load-directory dir)))
#+end_src
*** Zencoding
#+begin_src elisp
  (use-package emmet-mode
    :hook
    ((web-mode rjsx-mode typescript-mode) . emmet-mode)
    :init
    (setq emmet-indent-after-insert nil)
    (setq emmet-indentation 2)
    (setq emmet-expand-jsx-className? t)
    (setq emmet-move-cursor-between-quotes t)
    (setq emmet-self-closing-tag-style " /")

    :config
    (add-to-list 'emmet-jsx-major-modes 'web-mode)
    (add-to-list 'emmet-jsx-major-modes 'typescript-mode))

#+end_src
*** Javascript
**** prettier
#+begin_src elisp
  (use-package prettier-js
    :ensure-system-package (prettier . "npm i -g prettier")
    :hook
    (typescript-mode . prettier-js-mode))

  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
        (funcall (cdr my-pair)))))

  (add-hook 'web-mode-hook #'(lambda ()
                              (enable-minor-mode
                               '("\\.jsx?\\'" . prettier-js-mode))))
  (add-hook 'web-mode-hook #'(lambda ()
                              (enable-minor-mode
                               '("\\.tsx?\\'" . prettier-js-mode))))
#+end_src

**** Commit
#+begin_src elisp
  (use-package js-comint)
#+end_src
*** Typescript
#+begin_src elisp
  (use-package typescript-mode
    :ensure-system-package (typescript-language-server . "npm i -g typescript-language-server"))
  (use-package ts-comint
    :ensure-system-package (tsun . "npm install -g tsun"))

  (defun node-project-p ()
    "Predicate for determining if the open project is a Node one."
    (let ((p-root (cdr (project-current))))
      (file-exists-p (concat p-root "package.json"))))
#+end_src

#+end_src
*** Deno
#+begin_src elisp
  (defun deno-project-p ()
    "Predicate for determining if the open project is a Deno one."
    (let ((p-root (cdr (project-current))))
      (file-exists-p (concat p-root "deno.json"))))
#+end_src
*** Elisp
**** Unit Test
Buttercup
#+begin_src elisp
  (use-package buttercup)
#+end_src
*** Lua :first-quarter-moon-with-face:
#+begin_src elisp
  (use-package lua-mode)
#+end_src
*** Cooklang
#+begin_src elisp
  (straight-use-package
   '(el-patch :type git :host github :repo "cooklang/cook-mode"))
#+end_src
*** JSON
#+begin_src elisp
  (use-package json-mode)
#+end_src
*** Prisma
#+begin_src elisp
  (use-package prisma-mode
    :straight (prisma-mode :host github :repo "pimeys/emacs-prisma-mode")
    :ensure-system-package (prisma-language-server . "npm i -g @prisma/language-server"))
#+end_src
*** YAML
#+begin_src elisp
  (use-package yaml-mode)
#+end_src
*** Dart/Flutter
#+begin_src elisp
    (use-package dart-mode
      :hook (dart-mode . flutter-test-mode)
      (dart-mode . eglot-ensure))

    (use-package flutter
      :after (dart-mode)
      :bind (:map dart-mode-map
                  ("C-M-x" . #'flutter-run-or-hot-reload)))

    ;; (use-package lsp-dart
    ;;   :ensure t
    ;;   :hook (dart-mode . lsp)
    ;;   :custom
    ;;   (lsp-dart-flutter-sdk-dir "~/snap/flutter/common/flutter")
    ;;   :config
    ;;   (setq gc-cons-threshold (* 100 1024 1024)
    ;;         read-process-output-max (* 1024 1024)))
#+end_src
*** Eglot
Original code from https://github.com/joaotavora/eglot/discussions/999
#+begin_src elisp
  (defun ecma-server-program (_)
    "Decide which server to use for ECMA Script based on project characteristics."
    (cond ((deno-project-p) '("deno" "lsp" :initializationOptions (:enable t :lint t)))
          ((node-project-p) '("typescript-language-server" "--stdio"))
          (t                nil)))

  (use-package eglot
    :straight t
    :hook
    (typescript-mode . eglot-ensure)
    (typescript-ts-mode . eglot-ensure)
    (tsx-ts-mode . eglot-ensure)
    ;;(prisma-mode . eglot-ensure)
    :bind (:map eglot-mode-map
                ("C-c ." . eglot-code-actions)
                ("C-c e r" . eglot-rename)
                ("C-c e f" . eglot-format)
                ("M-?" . xref-find-references)
                ("M-." . xref-find-definitions)
                ("C-c x a" . xref-find-apropos)
                ("C-c f n" . flymake-goto-next-error)
                ("C-c f p" . flymake-goto-prev-error)
                ("C-c f d" . flymake-show-project-diagnostics))
    :custom
    (eglot-autoshutdown t)
    (eglot-menu-string "LSP")
    (eglot-ignored-server-capabilities '(:documentHighlightProvider))
    :config
    (add-to-list 'eglot-server-programs '((js-ts-mode tsx-ts-mode typescript-ts-mode) . ecma-server-program))
    (add-to-list 'eglot-server-programs '((prisma-mode) . ("prisma-language-server" "--stdio"))))
#+end_src

*** SQL
#+begin_src elisp
  (use-package sql-indent)
  (use-package sqlformat
    :ensure-system-package (pg_format . "sudo apt install pgformatter")
    :config
    (setq sqlformat-command 'pgformatter)
    (setq sqlformat-args '("-s2" "-g"))
    (add-hook 'sql-mode-hook 'sqlformat-on-save-mode)
    (define-key sql-mode-map (kbd "C-c C-f") 'sqlformat))
#+end_src
*** Reddit
#+begin_src elisp :tangle no
  (use-package md4rd
    :straight (md4rd :host github :repo "ahungry/md4rd"))
#+end_src

