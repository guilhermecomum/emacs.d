* My Emacs config
** Bootstrap
*** Native Comp
#+begin_src elisp
  (when (fboundp 'native-compile-async)
    (setq comp-deferred-compilation t))

  (when (file-directory-p "~/.emacs.d/elpa")
    (native-compile-async "~/.emacs.d/elpa" 'recursively))

  (setq native-comp-async-report-warnings-errors nil)
  (setq warning-minimum-level :error)
#+end_src

*** Package manager
Straight.el
#+BEGIN_SRC elisp
  (setq package-enable-at-startup nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)

  (use-package use-package-ensure-system-package)
#+END_SRC

*** Enconding
#+begin_src elisp
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (setq current-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

*** Misc
#+begin_src elisp
  (setq default-directory "~/")

  ;; Automatically revert buffers for changed files
  (global-auto-revert-mode t)

  ;; remembering the last place you visited in a file
  (save-place-mode 1)

  ;; Close all dired buffers after opening
  (setq dired-kill-when-opening-new-dired-buffer t)

  (use-package tramp
    :config
    (setq tramp-auto-save-directory "/tmp")
    (defvar disable-tramp-backups '(all)))

  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (defun dont-kill-scratch ()
    "This function doesn't let you kill scratch by mistake."
    (if (not (equal (buffer-name) "*scratch*"))
        t
      (bury-buffer)
      nil))
  (add-hook 'kill-buffer-query-functions #'dont-kill-scratch)

  ;; Store auto-save and backup files in a temporary directory
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq create-lockfiles nil)

  ;; writing yes or no is length, type y / n instead
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  (use-package neotree
    :bind([f9] . neotree-toggle)
    :config
    (setq neo-autorefresh nil)
    (setq neo-smart-open t)
    (with-eval-after-load 'neotree
      (define-key neotree-mode-map (kbd "h") 'neotree-hidden-file-toggle)))

  (use-package exec-path-from-shell)
  (setq exec-path-from-shell-variables '("GOPATH" "PATH" "MANPATH"))
  (exec-path-from-shell-initialize)

#+end_src

** UI
*** Theme
#+begin_src elisp
  (use-package doom-themes
    :config
    (doom-themes-neotree-config)
    (setq doom-themes-treemacs-theme "doom-colors")
    (set-face-attribute 'default nil :font "Fira Code 12")
    (set-face-attribute 'font-lock-keyword-face nil :slant 'italic :weight 'normal :family "CascadiaCode")
    (set-face-attribute 'region nil :background "#000" :foreground "#ffffff")
    ;;(load-theme (intern "doom-nord-light") t)
    (load-theme (intern "doom-nord") t))

  (with-eval-after-load 'doom-themes
    (doom-themes-treemacs-config))
#+end_src
*** Neotree
#+begin_src elisp
  (defun text-scale-twice ()
    (interactive)
    (progn(text-scale-adjust 0)(text-scale-decrease 2)))
  (add-hook 'neo-after-create-hook (lambda (_)(call-interactively 'text-scale-twice)))
#+end_src
*** Treemacs
#+begin_src elisp
  (use-package treemacs
    :config
    (treemacs-hide-gitignored-files-mode t)
    (progn
      (setq
       treemacs-litter-directories '("/node_modules" "/.venv" "/.cask")))
    :bind
    (:map global-map
          ("C-/" . treemacs-find-file)
          ([f8]   . treemacs)))


  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-magit
    :after (treemacs magit))

#+end_src
*** Improve theme loading
Source: [[https://www.reddit.com/r/emacs/comments/4mzynd/what_emacs_theme_are_you_currently_using/d43c5cw][Reddit]]
#+begin_src elisp
  (defadvice load-theme (before clear-previous-themes activate)
    "Clear existing theme settings instead of layering them"
    (mapc #'disable-theme custom-enabled-themes))
#+end_src

*** Icons
#+begin_src elisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

*** Cosmetics

**** Nyan cat
#+begin_src elisp
  (use-package nyan-mode
    :init
    (nyan-mode t))
#+end_src

**** Emoji
#+begin_src elisp
  (use-package emojify
      :config
      (add-hook 'after-init-hook #'global-emojify-mode))

#+end_src

*** Dimmer
#+begin_src elisp
  (use-package dimmer
      :init
      (dimmer-mode t)
      :config
      (setq dimmer-fraction 0.3))
#+end_src

*** Emacs interface
#+begin_src elisp
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (column-number-mode)
  (setq ring-bell-function 'ignore)
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-screen t)
#+end_src

*** Doom modeline
#+begin_src elisp
  (use-package doom-modeline
    :config
    (setq doom-modeline-height 35)
    (set-face-background 'doom-modeline-bar (face-background 'mode-line))
    (setq doom-modeline-bar-width 1)
    (doom-modeline-mode 1))
#+end_src
*** Dialog
Don't pop up UI dialogs when prompting
#+begin_src elisp
  (setq use-dialog-box nil)
#+end_src
*** Tabs
Centaur tabs
#+begin_src elisp
  (use-package centaur-tabs
    :demand
    :bind
    ("M-[" . centaur-tabs-backward)
    ("M-]" . centaur-tabs-forward)
    :config
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-gray-out-icons 'buffer)
    (setq centaur-tabs-style "rounded")
    (setq centaur-tabs-height 40)
    (centaur-tabs-mode t)
    (centaur-tabs-group-by-projectile-project)
    ;; Only show tabs in buffers visiting files
    (advice-add 'centaur-tabs-line :around
                (lambda (oldfn &rest args)
                  (if (buffer-file-name)
                      (apply oldfn args)
                    (setq header-line-format nil)))))
#+end_src
*** Company
#+begin_src elisp
  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("s-SPC" . company-complete-selection))
    (:map lsp-mode-map
          ("s-SPC" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.8))

  (setq company-tooltip-align-annotations t)

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
*** Buffers
Before kill a modified buffer, give option to see the diff
Original code from [[https://emacs.stackexchange.com/questions/3245/kill-buffer-prompt-with-option-to-diff-the-changes/3363#3363][here]]
#+begin_src elisp
  (defun my/kill-this-buffer ()
    (interactive)
    (catch 'quit
      (save-window-excursion
        (let (done)
          (when (and buffer-file-name (buffer-modified-p))
            (while (not done)
              (let ((response (read-char-choice
                               (format "Save file %s? (y, n, d, q) " (buffer-file-name))
                               '(?y ?n ?d ?q))))
                (setq done (cond
                            ((eq response ?q) (throw 'quit nil))
                            ((eq response ?y) (save-buffer) t)
                            ((eq response ?n) (set-buffer-modified-p nil) t)
                            ((eq response ?d) (diff-buffer-with-file) nil))))))
          (kill-buffer (current-buffer))))))
#+end_src
** Keys

*** Org-mode
#+begin_src elisp
  (global-set-key (kbd "C-c a")
                  (lambda ()
                    (interactive)
                    (org-agenda nil "z")))
  (global-set-key (kbd "C-c /") 'org-capture)
  (global-set-key (kbd "<f12>") 'org-journal-new-entry)
  (global-set-key (kbd "s-c") 'ox-clip-formatted-copy)
#+end_src
*** Buffer/Window
#+begin_src elisp
  (global-set-key [s-tab] 'next-buffer)
  (global-set-key [S-s-iso-lefttab] 'previous-buffer)

  ;;; change window
  (global-set-key [(C-tab)] 'other-window)
  (global-set-key [(C-M-tab)] 'other-window)

  ;;; Remap kill buffer to my/kill-this-buffer
  (global-set-key (kbd "C-x k") 'my/kill-this-buffer)
#+end_src
*** Code navigation
#+begin_src elisp
  (global-set-key (kbd "M-g") 'goto-line)
  (global-set-key (kbd "C-c s") 'sort-lines)
  (global-set-key (kbd "<C-return>") #'yafolding-toggle-element)
#+end_src
*** Editing
#+begin_src elisp
  (global-set-key (kbd "C-c c") 'comment-region)
  (global-set-key (kbd "C-c d") 'uncomment-region)
#+end_src

*** Terminal
#+begin_src elisp
  (global-set-key (kbd "C-c t") 'eshell)
#+end_src
*** Conf
#+begin_src elisp
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/.emacs.d/readme.org")))
#+end_src

** Editing
*** Display line numbers
#+begin_src elisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'conf-mode-hook #'display-line-numbers-mode)
#+end_src
*** Indent Guides
#+begin_src elisp :tangle no
  (use-package highlight-indent-guides
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    (setq highlight-indent-guides-method 'character))

#+end_src

*** Misc
#+begin_src elisp
  ;; Do not wrap lines
  (setq-default truncate-lines t)

  ;; spaces instead of tabs
  (setq-default indent-tabs-mode nil)

  ;; Complain about trailing white spaces
  (setq show-trailing-whitespace t)

  ;; Cleanup white spaces before save
  (setq whitespace-style '(face trailing lines tabs big-indent))
  (add-hook 'before-save-hook 'whitespace-cleanup)

  (use-package smartparens)
  (smartparens-global-mode t)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))


  (use-package rainbow-mode)

  (use-package string-inflection)

  (global-hl-line-mode +1)
#+end_src
*** Multiple cursor
#+begin_src elisp
      (use-package multiple-cursors
        :bind (("C-S-c C-S-c" . mc/edit-lines)
               ("s-." . mc/mark-next-like-this)
               ("s-," . mc/mark-previous-like-this)
               ("s->" . mc/mark-all-like-this)
               ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+end_src
*** Unfill paragraph
#+begin_src elisp
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph or (REGION) and make it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))
#+end_src

** Tools
*** Flycheck
#+begin_src elisp
  (use-package add-node-modules-path)
  (use-package flycheck
    :config
    (setq-default flycheck-highlighting-mode 'sexps)
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'my-flycheck-fringe-indicator
        (vector #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00011100
                #b00111110
                #b00111110
                #b00111110
                #b00011100
                #b00000000
                #b00000000
                #b00000000
                #b00000000
                #b00000000)))

    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-info)
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint json-jsonlist)))

    ;;Get rid of the background color in the Fringe area
    (set-face-attribute 'fringe nil
                        :foreground (face-foreground 'default)
                        :background (face-background 'default))
    (fringe-mode 15)

    (add-hook 'flycheck-mode-hook 'add-node-modules-path)
    (use-package flycheck-popup-tip
      :hook
      (flycheck-mode-hook . flychec-popup-tip-mode)))
#+end_src
*** Flyspell
#+begin_src elisp
  (use-package flyspell)
  (use-package flyspell-correct-popup)
  (setq ispell-program-name "aspell")
  (ispell-change-dictionary "pt_BR")

  (defun fd-switch-dictionary()
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "pt_BR") "english" "pt_BR")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))

  (global-set-key (kbd "<f5>") 'fd-switch-dictionary)
  (define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper)
#+end_src
*** Yasnippet
#+begin_src elisp
  (use-package yasnippet
    :init
    :config
    (yas-load-directory "~/.emacs.d/snippets")
    (yas-global-mode 1))
#+end_src
*** Helm
#+begin_src elisp
  (use-package helm
    :straight t
    :config
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-recentf-fuzzy-match    t))
#+end_src
*** Code Folding
#+begin_src elisp
  (use-package yafolding)
#+end_src
*** Restclient
#+begin_src elisp
(use-package restclient)
#+end_src
*** Projectile
#+begin_src elisp
    (use-package helm-projectile
      :after '(helm projectile))
    (use-package helm-ag
      :ensure-system-package (ag . "sudo apt install silversearcher-ag"))
    ;;  (use-package counsel-projectile)
    (use-package projectile
      :bind-keymap ("C-c p" . projectile-command-map)
      :config
      (setq projectile-indexing-method 'alien)
      (setq projectile-sort-order 'recently-active)
      (setq projectile-completion-system 'helm)

      (add-to-list 'projectile-globally-ignored-directories "node_modules")
      (add-to-list 'projectile-globally-ignored-files "yarn.lock")
      (helm-projectile-on)
      (projectile-mode))
#+end_src
*** Magit
#+begin_src elisp
  (use-package magit)
#+end_src
*** Blamer
#+begin_src elisp
  (use-package blamer
  :bind (("s-i" . blamer-show-commit-info)
         ("s-n" . blamer-mode))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 10)
  :custom-face
  (blamer-face ((t :foreground "#9099AB"
                    :background nil
                    :height .9
                    :italic t))))
#+end_src
*** Todoist
#+begin_src elisp :tangle no
  (setq todoist-token "")
#+end_src
** Modes
*** Org
**** Bootstrap
#+begin_src elisp
  (use-package org :straight (:type built-in))
  (use-package org-contrib)
  (use-package org-web-tools
    :ensure-system-package (pandoc . "sudo apt install pandoc"))

  (use-package org-ql
    :after '(org)
    :straight (org-ql :host github :repo "alphapapa/org-ql"))
  (use-package git-auto-commit-mode)
  (use-package ox-clip)
  (require 'org-inlinetask)
  (require 'org-tempo)
  (require 'org-collector)
  (setq org-export-coding-system 'utf-8)
  (setq org-directory "~/Projects/org-files")
  (setq org-tag-alist '(("work" . ?w) ("personal" . ?p) ("cto" . ?c) ("emacsLove" . ?l) ("quotes" . ?q) ("finances" . ?f) ("howto" . ?h)))
  (setq org-startup-indented t)
  (setq org-export-with-toc nil)
  (setq org-export-with-section-numbers nil)
  (setq gac-automatically-push-p t)
  (add-to-list 'org-modules 'org-habit t)
  (add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src
**** Reveal
#+begin_src elisp
  (use-package ox-reveal)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-title-slide nil)
  (setq org-reveal-mathjax t)

  (use-package htmlize)
#+end_src
**** UI
Make bold, italic and other emphasis prettier
#+begin_src elisp
  (setq org-hide-emphasis-markers t)
#+end_src
**** Olivetti
#+begin_src elisp
  (use-package olivetti
    :custom
    (olivetti-body-width 120)
    :config
    (add-hook 'markdown-mode-hook (lambda () (olivetti-mode)))
    (add-hook 'org-mode-hook (lambda () (olivetti-mode))))
#+end_src
**** Journal
#+begin_src elisp
  (use-package org-journal
    :config
    (add-hook 'org-journal-after-save-hook 'git-auto-commit-mode)

    (setq org-journal-enable-agenda-integration t
          org-journal-dir "~/Projects/org-files/journal/"
          org-journal-file-type 'yearly
          org-journal-time-format ""
          org-journal-file-format "%Y.org"
          org-journal-date-format "%A, %d %B %Y"))


  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (setq org-capture-templates '(("d" "Daily questions" plain (function org-journal-find-location)
                                 (file "~/.emacs.d/templates/daily.org")
                                 :jump-to-captured t :immediate-finish t)))
#+end_src
**** Super-agenda
#+begin_src elisp
  (use-package org-super-agenda
    :after org-agenda
    :config
    (org-super-agenda-mode t))

  (setq org-agenda-custom-commands
        '(("z" "Super view"
           ((tags "cto" ((org-agenda-overriding-header "Objetivos do ciclo")))
            (agenda "" ((org-agenda-span 'day)
                        ;;(org-agenda-prefix-format "%-2i")
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :todo "TODAY"
                                  :scheduled today
                                  :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-agenda-remove-tags t)
                         (org-super-agenda-groups
                          '(
                            (:name "Next to do"
                                   :todo "NEXT"
                                   :order 1)
                            (:name "Due Soon"
                                   :discard (:tag ("finances"))
                                   :deadline future
                                   :order 8)
                            (:name "Personal"
                                   :tag "personal"
                                   :order 30)
                            (:name "Work"
                                   :tag "work"
                                   :order 31)
                            (:discard (:tag ("Routine" "Daily" "cto" "finances")))))))
            ))
          ))
#+end_src
**** Functions
Check if a billing is paid based on the date
#+begin_src elisp
  (defun is-paid? (time)
    (if (eq (string-to-number (format-time-string "%m")) (nth 4 (org-parse-time-string time)))
        "-" "pago"))
#+end_src
Add ID to all headings [[https://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode][source]]
#+begin_src elisp
  (defun add-id-to-tasks-in-file ()
    "Add ID properties to all tasks in the current file which
    do not already have one."
    (interactive)
    (org-ql-select (buffer-file-name)
      '(and
        (todo))
      :action #'org-id-get-create))
#+end_src

*** Markdown
#+begin_src elisp
  (use-package markdown-mode)
#+end_src
*** Typescript
#+begin_src elisp
  (use-package typescript-mode
    :ensure-system-package (typescript-language-server . "npm i -g typescript-language-server")
    :config
    (setq typescript-indent-level 2))
#+end_src
*** Web mode
#+begin_src elisp
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.js[x]?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-enable-auto-indentation nil
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-block-padding 2
          web-mode-comment-style 2
          web-mode-enable-css-colorization t
          web-mode-enable-auto-pairing t
          web-mode-enable-comment-keywords t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t
          web-mode-content-types-alist  '(("django" . "\\.tpl\\'"))
          web-mode-content-types-alist  '(("jsx" . "\\.js[x]?\\'"))))

  (add-hook 'web-mode-hook  'auto-rename-tag-mode)
  (add-hook 'web-mode-hook 'lsp-deferred
            (lambda () (pcase (file-name-extension buffer-file-name)
                         ("tsx" ('lsp-deferred)))))
#+end_src
Auto rename tag
#+begin_src elisp
  (use-package auto-rename-tag)
#+end_src

yasnippet
#+begin_src elisp
  (eval-after-load 'yasnippet
    '(let ((dir "~/.emacs.d/snippets/web-mode"))
        (add-to-list 'yas-snippet-dirs dir)
        (yas-load-directory dir)))
#+end_src
*** Zencoding
#+begin_src elisp
  (use-package emmet-mode
    :hook
    ((web-mode rjsx-mode typescript-mode) . emmet-mode)
    :init
    (setq emmet-indent-after-insert nil)
    (setq emmet-indentation 2)
    (setq emmet-expand-jsx-className? t)
    (setq emmet-move-cursor-between-quotes t)
    (setq emmet-self-closing-tag-style " /")

    :config
    (add-to-list 'emmet-jsx-major-modes 'web-mode)
    (add-to-list 'emmet-jsx-major-modes 'typescript-mode))

#+end_src
*** Javascript
**** prettier
#+begin_src elisp
  (use-package prettier-js
    :ensure-system-package (prettier . "npm i -g prettier")
    :hook
    (typescript-mode . prettier-js-mode))

  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
        (funcall (cdr my-pair)))))

  (add-hook 'web-mode-hook #'(lambda ()
                              (enable-minor-mode
                               '("\\.jsx?\\'" . prettier-js-mode))))
  (add-hook 'web-mode-hook #'(lambda ()
                              (enable-minor-mode
                               '("\\.tsx?\\'" . prettier-js-mode))))
#+end_src

*** Commit
#+begin_src elisp
  (use-package js-comint)
#+end_src
*** Elisp
**** Unit Test
Buttercup
#+begin_src elisp
  (use-package buttercup)
#+end_src
*** Lua :first-quarter-moon-with-face:
#+begin_src elisp
  (use-package lua-mode)
#+end_src
*** Cooklang
#+begin_src elisp
  (straight-use-package
   '(el-patch :type git :host github :repo "cooklang/cook-mode"))
#+end_src
*** JSON
#+begin_src elisp
  (use-package json-mode)
#+end_src
*** Prisma
#+begin_src elisp
    (use-package prisma-mode
      :straight (prisma-mode :host github :repo "pimeys/emacs-prisma-mode"))

#+end_src
*** YAML
#+begin_src elisp
  (use-package yaml-mode)
#+end_src
*** Dart/Flutter
#+begin_src elisp
  (use-package dart-mode
    :hook (dart-mode . flutter-test-mode))

  (use-package flutter
    :after (dart-mode)
    :bind (:map dart-mode-map
                ("C-M-x" . #'flutter-run-or-hot-reload)))

  (use-package lsp-dart
    :ensure t
    :hook (dart-mode . lsp)
    :custom
    (lsp-dart-flutter-sdk-dir "~/snap/flutter/common/flutter")
    :config
    (setq gc-cons-threshold (* 100 1024 1024)
          read-process-output-max (* 1024 1024)))
#+end_src
*** LSP
#+begin_src elisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-enable-folding nil
          lsp-idle-delay 0.500
          lsp-enable-text-document-color nil
          ;; Reduce unexpected modifications to code
          lsp-enable-on-type-formatting nil
          ;; Make breadcrumbs opt-in; they're redundant with the modeline and imenu
          lsp-treemacs-sync-mode 1
          ;; performance tips from [[https://ianyepan.github.io/posts/emacs-ide/][source]]
          lsp-eldoc-hook nil
          lsp-eldoc-render-all nil
          lsp-enable-imenu t
          lsp-enable-on-type-formatting nil
          lsp-enable-snippet nil
          lsp-enable-symbol-highlighting nil
          lsp-headerline-breadcrumb-enable t
          lsp-log-io nil
          ;;lsp-modeline-code-actions-enable nil
          lsp-modeline-diagnostics-enable nil
          lsp-restart 'auto-restart
          ;;lsp-semantic-tokens-enable nil
          ;;lsp-signature-auto-activate nil
          lsp-signature-render-documentation nil)
    :hook (
           (typescript-mode . lsp-deferred)
           (dart-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred))

  (use-package lsp-treemacs
    :after lsp-mode)

  (use-package lsp-tailwindcss
    :init (setq lsp-tailwindcss-add-on-mode t)
    :config (add-to-list 'lsp-tailwindcss-major-modes 'typescript-tsx-mode :append)
    :after (lsp-mode))

  (use-package lsp-tailwindcss)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    ;; :custom ()
    :config
    (setq lsp-eldoc-render-all nil
          lsp-signature-auto-activate nil
          lsp-ui-doc-delay 1.3
          lsp-ui-doc-enable t
          lsp-ui-doc-include-signature t
          lsp-ui-doc-position 'at-point
          lsp-ui-doc-show-with-cursor nil
          lsp-ui-doc-show-with-mouse t
          lsp-ui-doc-use-childframe t
          lsp-ui-peek-enable t
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-delay 0.05
          lsp-ui-doc-border (face-foreground 'default))

    (define-key lsp-ui-mode-map (kbd "C-M-.") #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map (kbd "C-M-?") #'lsp-ui-peek-find-references))

  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;;(use-package dap-mode)
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
*** SQL
#+begin_src elisp
  (use-package sql-indent)
  (use-package sqlformat
    :ensure-system-package (pg_format . "sudo apt install pgformatter")
    :config
    (setq sqlformat-command 'pgformatter)
    (setq sqlformat-args '("-s2" "-g"))
    (add-hook 'sql-mode-hook 'sqlformat-on-save-mode)
    (define-key sql-mode-map (kbd "C-c C-f") 'sqlformat))
#+end_src

